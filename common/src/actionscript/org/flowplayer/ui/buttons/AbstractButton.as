/* * This file is part of Flowplayer, http://flowplayer.org * * Copyright (c) 2008 Flowplayer Ltd * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.ui.buttons {    import flash.display.DisplayObject;    import flash.display.DisplayObjectContainer;    import flash.display.MovieClip;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.geom.ColorTransform;    import org.flowplayer.view.AnimationEngine;    /**     * @author api     */    public class AbstractButton extends ConfigurableWidget {        protected var _face:DisplayObjectContainer;        protected var _config:ButtonConfig;        protected static const HIGHLIGHT_INSTANCE_NAME:String = "mOver";        protected static const ICON_INSTANCE_NAME:String = "mIcon";        protected static const LINE_DECORATIONS_INSTANCE_NAME:String = "lines";        protected var _animationEngine:AnimationEngine;        public function AbstractButton(config:ButtonConfig, animationEngine:AnimationEngine) {            _config = config;            _animationEngine = animationEngine;            _face = DisplayObjectContainer(addFaceIfNotNull(createFace()));            childrenCreated();            enabled = true;            addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);        }        protected function childrenCreated():void {        }        public function addFaceIfNotNull(child:DisplayObject):DisplayObject {            if (! child) return child;            return addChild(child);        }        protected function onAddedToStage(event:Event):void {            onMouseOut();        }        override protected function onResize():void {            log.debug("onResize() " + width + " x " + height);            _face.width = width;            _face.height = height;        }        protected function get faceWidth():Number {            return _face.width;        }        protected function get faceHeight():Number {            return _face.height;        }        override public function configure(config:Object):void {            _config = config as ButtonConfig;            enabled = _config.enabled;            onMouseOut();        }        protected function drawLines():void {            if (_face) {                var lines:DisplayObject = _face.getChildByName(LINE_DECORATIONS_INSTANCE_NAME);                if (lines) {                    log.debug("lines alpha initial value is " + lines.alpha);                    transformColor(lines, _config.lineColorRGBA[0], _config.lineColorRGBA[1], _config.lineColorRGBA[2], _config.lineColorRGBA[3]);                }            }        }        protected function registerEventListeners(addListeners:Boolean, target:DisplayObject):void {            //var func:String = addListeners ? "addEventListener" : "removeEventListener";            if (addListeners) {                //set the priority high so internal events get called first                target["addEventListener"](MouseEvent.ROLL_OVER, onMouseOver, false, 100);                target["addEventListener"](MouseEvent.ROLL_OUT, onMouseOut, false, 100);                target["addEventListener"](MouseEvent.MOUSE_DOWN, onMouseDown, false, 100);                target["addEventListener"](MouseEvent.CLICK, onClicked, false, 100);            } else {                target["removeEventListener"](MouseEvent.ROLL_OVER, onMouseOver);                target["removeEventListener"](MouseEvent.ROLL_OUT, onMouseOut);                target["removeEventListener"](MouseEvent.MOUSE_DOWN, onMouseDown);                target["removeEventListener"](MouseEvent.CLICK, onClicked);            }            //            this[func](MouseEvent.CLICK, onClicked);        }        override public function set enabled(value:Boolean):void {            log.debug("setEnabled(), config == " + _config);            _config.setEnabled(value);            buttonMode = enabled;            registerEventListeners(enabled, this);            alpha = enabled ? 1 : 0.5;            doEnable(enabled);        }        protected function doEnable(enabled:Boolean):void {        }        override public function get enabled():Boolean {            return _config.enabled;        }        private function transformColor(disp:DisplayObject, redOffset:Number, greenOffset:Number, blueOffset:Number, alphaOffset:Number):void {            log.debug("transformColor, alphaOffset " + alphaOffset + ", RGB: " + redOffset + ", " + greenOffset + ", " + blueOffset);            if (! disp) return;//ColorTransform(redMultiplier:Number = 1,greenMultiplier:Number = 1,blueMultiplier:Number = 1,alphaMultiplier:Number = 1,redOffset:Number = 0,greenOffset:Number = 0,blueOffset:Number = 0,alphaOffset:Number = 0):*;            var transform:ColorTransform = new ColorTransform(0, 0, 0, alphaOffset, redOffset, greenOffset, blueOffset);            disp.transform.colorTransform = transform;        }        protected function onClicked(event:MouseEvent):void {            log.debug("clicked!");        }        protected function onMouseOut(event:MouseEvent = null):void {//            if (event && isParent(event.relatedObject as DisplayObject, this)) return;            log.debug("onMouseOut");            resetDispColor(_face.getChildByName(HIGHLIGHT_INSTANCE_NAME));            showMouseOutState(_face);        }        protected function onMouseOver(event:MouseEvent):void {            log.debug("onMouseOver(), face == " + _face.getChildByName(HIGHLIGHT_INSTANCE_NAME));            transformDispColor(_face.getChildByName(HIGHLIGHT_INSTANCE_NAME));            showMouseOverState(_face);        }        protected function showMouseOverState(clip:DisplayObjectContainer):void {            log.debug("showMouseOverState " + clip);            if (clip is MovieClip) {                log.debug("calling play() on " + clip);                if (MovieClip(clip).currentFrame == 1) {                    MovieClip(clip).play();                }            }            animateClip(clip, AbstractButton.HIGHLIGHT_INSTANCE_NAME, true);            animateClip(clip, AbstractButton.ICON_INSTANCE_NAME, true);        }        private function animateClip(clip:DisplayObjectContainer, animClip:String, over:Boolean):void {            var overClip:DisplayObject = clip.getChildByName(animClip);            if (overClip && overClip is MovieClip) {                if (over) {                    try {                        MovieClip(overClip).gotoAndPlay("over");                    } catch (e:Error) {                        // we did not have the the "over" label there, ignore                    }                } else {                    MovieClip(overClip).gotoAndStop(1);                }            }        }        protected function showMouseOutState(clip:DisplayObjectContainer):void {            if (clip is MovieClip) {                log.debug("calling gotoAndStop(1) on " + clip);                MovieClip(clip).gotoAndStop(1);            }            animateClip(clip, AbstractButton.HIGHLIGHT_INSTANCE_NAME, false);            animateClip(clip, AbstractButton.ICON_INSTANCE_NAME, false);        }        protected function transformDispColor(disp:DisplayObject):void {            log.debug("mouse over colors", _config.overColorRGBA);            transformColor(disp, _config.overColorRGBA[0], _config.overColorRGBA[1], _config.overColorRGBA[2], _config.overColorRGBA[3]);        }        protected function resetDispColor(disp:DisplayObject):void {            log.debug("normal colors", _config.colorRGBA);            transformColor(disp, _config.colorRGBA[0], _config.colorRGBA[1], _config.colorRGBA[2], _config.colorRGBA[3]);            x        }        public function setToggledColor(isToggled:Boolean):void {            log.debug("setToggledColor(), isToggled == " + isToggled + ", face is " + _face);            var icon:DisplayObject = _face.getChildByName(ICON_INSTANCE_NAME);            if (! icon) {                log.debug("face " + _face + " does not have " + (ICON_INSTANCE_NAME || HIGHLIGHT_INSTANCE_NAME) + " to be highlighted");                return;            }            log.debug("setToggledColor(), changing highlight of " + icon);            var colors:Array = isToggled ? _config.onRGBA : _config.offRGBA;            transformColor(icon, colors[0], colors[1], colors[2], colors[3]);        }        protected function createFace():DisplayObjectContainer {            return null;        }        protected function onMouseDown(event:MouseEvent):void {            var overClip:DisplayObject = _face.getChildByName(HIGHLIGHT_INSTANCE_NAME);            try {                if (overClip && overClip is MovieClip)                    MovieClip(overClip).gotoAndPlay("down");            } catch (e:Error) {            }        }        protected function get face():DisplayObjectContainer {            return _face;        }        protected function get config():Object {            return _config;        }    }}